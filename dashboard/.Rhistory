step_corr(all_predictors(), threshold = 0.75) %>%
step_zv(all_predictors())
lr_spec <- logistic_reg()
lol_wf <- workflow() %>%
add_model(lr_spec) %>%
add_recipe(lol_rec)
control <- control_resamples(save_pred = TRUE)
metric <- metric_set(accuracy, roc_auc, f_meas)
lr_res <-
fit_resamples(
lol_wf,
lol_folds,
control = control,
metrics = metric
)
doParallel::registerDoParallel()
control <- control_resamples(save_pred = TRUE)
metric <- metric_set(accuracy, roc_auc, f_meas)
lr_res <-
fit_resamples(
lol_wf,
lol_folds,
control = control,
metrics = metric
)
lr_res %>%
collect_metrics()
glmnet_spec <-
logistic_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
glmnet_workflow <-
workflow() %>%
add_recipe(lol_rec) %>%
add_model(glmnet_spec)
glmnet_grid <- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20), mixture = c(0.05,
0.2, 0.4, 0.6, 0.8, 1))
glmnet_tune <-
tune_grid(glmnet_workflow, resamples = lol_folds, grid = glmnet_grid)
glmnet_tune %>% autoplot()
lol_last_fit <- lol_wf %>%
last_fit(lol_split, metrics = metric)
lol_last_fit %>% collect_metrics()
lol_last_fit %>%
collect_predictions() %>%
conf_mat(estimate = .pred_class, truth = blueWins) %>%
autoplot()
## We don't need additional variables except from A1-A9
lol_last_fit %>%
extract_fit_parsnip() %>%
vip::vi() %>%
mutate(
Importance = abs(Importance),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
geom_col() +
scale_x_continuous(expand = c(0, 0)) +
labs(y = NULL,
title = "Variable Importance Plot")
data %>%
select(blueExperienceDiff)
data %>%
select(blueExperienceDiff) %>%
mutate(winning = ifelse(blueExperienceDiff > 0, 1, 0))
data %>%
select(blueExperienceDiff) %>%
mutate(winning = ifelse(blueExperienceDiff > 0, 1, 0)) %>%
count(winning)
required_columns <- c(
## ID and Predictor Variable
'blueWins',
## Statistics for Blue Teams
'blueWardsPlaced', 'blueWardsDestroyed','blueKills', 'blueDeaths',
'blueAssists','blueEliteMonsters', 'blueDragons', 'blueHeralds',
'blueTowersDestroyed', 'blueAvgLevel','blueCSPerMin', 'blueGoldPerMin',
## Shared Statisitics
'blueGoldDiff','blueFirstBlood','blueExperienceDiff',
## Statistics for Red Teams
'redWardsPlaced', 'redWardsDestroyed','redKills', 'redDeaths',
'redAssists','redEliteMonsters', 'redDragons','redHeralds',
'redTowersDestroyed', 'redAvgLevel','redCSPerMin','redGoldPerMin'
)
modelling_df <- data %>%
select(all_of(required_columns)) %>%
mutate(winning = ifelse(blueExperienceDiff > 0, 1, 0)) %>%
select(-blueExperienceDiff) %>%
mutate(blueWins = factor(blueWins))
modelling_df
set.seed(42)
lol_split <- initial_split(modelling_df, prop = 0.67)
lol_train <- training(lol_split)
lol_test <- testing(lol_split)
lol_folds <- vfold_cv(lol_train)
set.seed(42)
lol_split <- initial_split(modelling_df)
lol_train <- training(lol_split)
lol_test <- testing(lol_split)
lol_folds <- vfold_cv(lol_train)
lol_rec <-
recipe(blueWins~., data = lol_train) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors(), threshold = 0.75) %>%
step_zv(all_predictors())
lr_spec <- logistic_reg()
lol_wf <- workflow() %>%
add_model(lr_spec) %>%
add_recipe(lol_rec)
control <- control_resamples(save_pred = TRUE)
metric <- metric_set(accuracy, roc_auc, f_meas)
lr_res <-
fit_resamples(
lol_wf,
lol_folds,
control = control,
metrics = metric
)
lr_res %>%
collect_metrics()
lol_last_fit <- lol_wf %>%
last_fit(lol_split, metrics = metric)
lol_last_fit %>%
collect_predictions() %>%
conf_mat(estimate = .pred_class, truth = blueWins) %>%
autoplot()
## We don't need additional variables except from A1-A9
lol_last_fit %>%
extract_fit_parsnip() %>%
vip::vi() %>%
mutate(
Importance = abs(Importance),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
geom_col() +
scale_x_continuous(expand = c(0, 0)) +
labs(y = NULL,
title = "Variable Importance Plot")
glmnet_spec <-
logistic_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
glmnet_workflow <-
workflow() %>%
add_recipe(lol_rec) %>%
add_model(glmnet_spec)
glmnet_grid <- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20), mixture = c(0.05,
0.2, 0.4, 0.6, 0.8, 1))
glmnet_tune <-
tune_grid(glmnet_workflow, resamples = lol_folds, grid = glmnet_grid)
glmnet_tune %>% autoplot()
glmnet_tune %>% select_best()
glmnet_workflow
glmnet_tune
glmnet_final_workflow <- glmnet_workflow %>%
finalize_workflow(select_best(glmnet_tune,"f_meas"))
glmnet_spec <-
logistic_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
glmnet_workflow <-
workflow() %>%
add_recipe(lol_rec) %>%
add_model(glmnet_spec)
glmnet_grid <- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20), mixture = c(0.05,
0.2, 0.4, 0.6, 0.8, 1))
glmnet_tune <-
tune_grid(glmnet_workflow, resamples = lol_folds, grid = glmnet_grid,metrics = metric)
glmnet_tune %>% autoplot()
glmnet_tune %>% select_best()
glmnet_final_workflow <- glmnet_workflow %>%
finalize_workflow(select_best(glmnet_tune,"f_meas"))
glmnet_final_workflow
glmnet_last_fit <- last_fit(glmnet_final_workflow,lol_split, metrics = metric)
glmnet_last_fit
glmnet_last_fit %>%
collect_metrics()
lol_last_fit %>%
collect_predictions() %>%
conf_mat(estimate = .pred_class, truth = blueWins) %>%
autoplot()
glmnet_last_fit %>%
collect_predictions() %>%
conf_mat(estimate = .pred_class, truth = blueWins) %>%
autoplot()
## We don't need additional variables except from A1-A9
glmnet_last_fit %>%
extract_fit_parsnip() %>%
vip::vi() %>%
mutate(
Importance = abs(Importance),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
geom_col() +
scale_x_continuous(expand = c(0, 0)) +
labs(y = NULL,
title = "Variable Importance Plot")
glmnet_final_workflow
modelling_df
lol_train
lol_rec %>% prep() %>% juice()
lr_model <- fit(glmnet_final_workflow, modelling_df)
lr_model %>%
write_rds("lr_model.rds")
shiny::runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
styler:::style_active_file()
modelling_df
modelling_df %>% select(-blueWins)
modelling_df %>% select(-blueWins)
modelling_df %>% select(-blueWins) %>% glimpse()
modelling_df %>% select(-blueWins) %>% glimpse()
selectInput()
?selectInput
runApp('lol-dashboard')
library(DT)
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
modelling_df %>% select(-blueWins) %>% glimpse()
?numericInput
lol_rec %>% prep() %>% juice()
lol_rec %>% prep() %>% juice() %>% glimpse()
lol_rec %>% prep() %>% juice() %>% colnames()
lol_rec %>% prep() %>% juice() %>% colnames() -> nnn
modelling_df
modelling_df %>% select(nnn) %>% glimpse()
runApp('lol-dashboard')
runApp('lol-dashboard')
modelling_df
modelling_df %>% slice(1)
predict(lr_model,modelling_df)
predict(lr_model,modelling_df %>% slice(0))
predict(lr_model,modelling_df %>% slice(1))
runApp('lol-dashboard')
?actionButton
runApp('lol-dashboard')
get_pred <- function(model, df) {
predict(model, df, "prob") %>%
select(.pred_Yes) %>%
mutate(.pred_Yes = round(.pred_Yes * 100, 1)) %>%
pull()
}
get_pred(lr_model, modelling_df %>% slice(1))
predict(lr_model, modelling_df %>% slice(1), "prob")
get_pred <- function(model, df) {
predict(model, df, "prob") %>%
select(.pred_1) %>%
mutate(.pred_1 = round(.pred_1 * 100, 1)) %>%
pull()
}
predict(lr_model, modelling_df %>% slice(1), "prob")
get_pred(lr_model, modelling_df %>% slice(1))
styler:::style_active_file()
runApp('lol-dashboard')
shiny::runApp('lol-dashboard')
runApp('lol-dashboard')
?selectInput
?radioButtons
runApp('lol-dashboard')
nnn
knitr::opts_chunk$set(echo = TRUE)
modelling_df <- data %>%
select(all_of(nnn)) %>%
mutate(winning = ifelse(blueExperienceDiff > 0, 1, 0)) %>%
select(-blueExperienceDiff) %>%
mutate(blueWins = factor(blueWins))
modelling_df <- data %>%
select(all_of(required_columns)) %>%
mutate(winning = ifelse(blueExperienceDiff > 0, 1, 0)) %>%
select(-blueExperienceDiff) %>%
mutate(blueWins = factor(blueWins)) %>%
select(all_of(nnn))
modelling_df
set.seed(42)
lol_split <- initial_split(modelling_df)
lol_train <- training(lol_split)
lol_test <- testing(lol_split)
lol_folds <- vfold_cv(lol_train)
lol_rec <-
recipe(blueWins~., data = lol_train) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors(), threshold = 0.75) %>%
step_zv(all_predictors())
lol_rec %>% prep() %>% juice()
lol_rec <-
recipe(blueWins~., data = lol_train) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors(), threshold = 0.75) %>%
step_zv(all_predictors())
lr_spec <- logistic_reg()
lol_wf <- workflow() %>%
add_model(lr_spec) %>%
add_recipe(lol_rec)
control <- control_resamples(save_pred = TRUE)
metric <- metric_set(accuracy, roc_auc, f_meas)
lr_res <-
fit_resamples(
lol_wf,
lol_folds,
control = control,
metrics = metric
)
lr_res %>%
collect_metrics()
lol_last_fit <- lol_wf %>%
last_fit(lol_split, metrics = metric)
glmnet_spec <-
logistic_reg(penalty = tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
glmnet_workflow <-
workflow() %>%
add_recipe(lol_rec) %>%
add_model(glmnet_spec)
glmnet_grid <- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20), mixture = c(0.05,
0.2, 0.4, 0.6, 0.8, 1))
glmnet_tune <-
tune_grid(glmnet_workflow, resamples = lol_folds, grid = glmnet_grid,metrics = metric)
glmnet_tune %>% autoplot()
glmnet_tune %>% select_best()
glmnet_final_workflow <- glmnet_workflow %>%
finalize_workflow(select_best(glmnet_tune,"f_meas"))
glmnet_last_fit <- last_fit(glmnet_final_workflow,lol_split, metrics = metric)
glmnet_last_fit %>%
collect_metrics()
glmnet_last_fit %>%
collect_predictions() %>%
conf_mat(estimate = .pred_class, truth = blueWins) %>%
autoplot()
lr_model <- fit(glmnet_final_workflow, modelling_df)
lr_model
predict(lr_model,modelling_df %>% slice(1))
lr_model %>%
write_rds("lr_model.rds")
## We don't need additional variables except from A1-A9
glmnet_last_fit %>%
extract_fit_parsnip() %>%
vip::vi() %>%
mutate(
Importance = abs(Importance),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
geom_col() +
scale_x_continuous(expand = c(0, 0)) +
labs(y = NULL,
title = "Variable Importance Plot")
runApp('lol-dashboard')
runApp('lol-dashboard')
library(shinydashboard)
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
?tagList
?div
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
?tabPanel
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons("controller", "Controller", 1:3, 1)
),
mainPanel(
tabsetPanel(
id = "hidden_tabs",
# Hide the tab values.
# Can only switch tabs by using `updateTabsetPanel()`
type = "hidden",
tabPanelBody("panel1", "Panel 1 content"),
tabPanelBody("panel2", "Panel 2 content"),
tabPanelBody("panel3", "Panel 3 content")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "hidden_tabs", selected = paste0("panel", input$controller))
})
}
if (interactive()) {
shinyApp(ui, server)
}
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
styler:::style_active_file()
modelling_df
modelling_df %>% glimpse()
modelling_df %>% summarize(across(everything(), min))
?summarize
?summarize_all
modelling_df %>%
summarise(across(everything(), list(min = min, max = max)))
modelling_df %>%
summarise(across(where(is.numeric), list(min = min, max = max)))
modelling_df %>%
summarise(across(where(is.numeric), list(min = min, max = max))) %>% gather()
modelling_df %>%
summarise(across(where(is.numeric), list(min = min, max = max))) %>% gather() %>% separate(key, c("variable","type"), sep = "_")
modelling_df %>%
summarise(across(where(is.numeric), list(min = min, max = max))) %>% gather() %>% separate(key, c("variable","type"), sep = "_") %>% pivot_wider(names_from = type, values_from = value)
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
list(
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
)
list(
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod."
)
texts <- list(
main = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
ff =  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod.",
dd = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
elementum, magna id lacinia interdum, tellus justo tristique leo,
id interdum ante dui et turpis. Donec tempus, eros at ultrices efficitur,
nisl libero blandit erat, vel commodo ligula risus id urna. Nulla eros ex,
pellentesque vel risus eget, suscipit sodales metus. Pellentesque sit amet
mollis enim. Vivamus sit amet magna enim. Suspendisse pulvinar neque vitae
sodales congue. Sed et mi pellentesque, volutpat purus eget, euismod ante.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos. Maecenas pretium neque a mollis euismod."
)
texts
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
runApp('lol-dashboard')
